-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoXC1,skoRC1,skoEAC1,skoEC1}, And[skoRC1<=0,skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoXC1) (E skoRC1) (E skoEAC1) (E skoEC1) [[skoRC1<=0]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoXC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoEAC1 () Real) (declare-fun skoEC1 () Real) (assert (and (<= skoRC1 0.) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= skoRC1 0.) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoRC1>0,skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[0<skoRC1]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (> skoRC1 0.) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1)))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (> skoRC1 0.) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoRC1<=0,skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))>skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[skoRC1<=0]/\[[(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))<(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= skoRC1 0.) (and (> (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1)))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= skoRC1 0.) (> (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1)))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1)))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoRC1>0,skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[0<skoRC1]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (> skoRC1 0.) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1))))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (> skoRC1 0.) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))<=skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoRC1>0,skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))<=(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))]/\[[0<skoRC1]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (> skoRC1 0.) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1))))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (> skoRC1 0.) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoRC1<=0,skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))>skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[skoRC1<=0]/\[[(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))<(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= skoRC1 0.) (and (> (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1))))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= skoRC1 0.) (> (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))<=skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))<=(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1)))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))<=skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoRC1>0,skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))<=skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))<=(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))]/\[[0<skoRC1]/\[[(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))<=(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (> skoRC1 0.) (and (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1)))))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (> skoRC1 0.) (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))<=skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))<=skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))<=(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))]/\[[(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))<=(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1))))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

-----[begin problem]-----
% In Mathematica format:
Timing[Resolve[Exists[{skoEC1,skoRC1,skoXC1,skoEAC1}, And[0<=skoXC1,skoXC1>-1+skoRC1*(16/7),skoXC1*((-1/2)+skoEC1*((-3/2)+skoEC1*((-3/2)+skoEC1*(-1/2))))<=skoRC1*(skoEAC1*2+skoEC1*(skoEAC1*(3/2)+skoEC1*skoEAC1*(1/2))+skoRC1*((-1/2)+skoEC1*(1+skoEC1*(1/2)))),skoXC1*((1/2)+skoEC1*((3/2)+skoEC1*((3/2)+skoEC1*(1/2))))<=skoRC1*(skoEAC1*-2+skoEC1*(skoEAC1*(-3/2)+skoEC1*skoEAC1*(-1/2))+skoRC1*((1/2)+skoEC1*(-1+skoEC1*(-1/2)))),skoXC1*skoXC1*(-1/4)<=1+skoRC1*-1,skoXC1*(1+skoXC1*(-1/4))<=skoRC1,skoEC1<=(1/32),skoEAC1<=(1/85070591730234615865843651857942052864),(-1/32)<=skoEC1,(-1/85070591730234615865843651857942052864)<=skoEAC1,skoXC1<=2,skoRC1<=3,(1/2)<=skoXC1,0<=skoRC1]], Reals]]

% In QepcadB format:
(E skoEC1) (E skoRC1) (E skoXC1) (E skoEAC1) [[0<=skoXC1]/\[[(-1+(skoRC1 (16/7)))<skoXC1]/\[[(skoXC1 (-1/2+(skoEC1 (-3/2+(skoEC1 (-3/2+(skoEC1 (-1/2))))))))<=(skoRC1 (((skoEAC1 (2))+(skoEC1 ((skoEAC1 (3/2))+(skoEC1 skoEAC1 (1/2)))))+(skoRC1 (-1/2+(skoEC1 (1+(skoEC1 (1/2))))))))]/\[[(skoXC1 (1/2+(skoEC1 (3/2+(skoEC1 (3/2+(skoEC1 (1/2))))))))<=(skoRC1 (((skoEAC1 (-2))+(skoEC1 ((skoEAC1 (-3/2))+(skoEC1 skoEAC1 (-1/2)))))+(skoRC1 (1/2+(skoEC1 (-1+(skoEC1 (-1/2))))))))]/\[[(skoXC1 skoXC1 (-1/4))<=(1+(skoRC1 (-1)))]/\[[(skoXC1 (1+(skoXC1 (-1/4))))<=skoRC1]/\[[skoEC1<=1/32]/\[[skoEAC1<=1/85070591730234615865843651857942052864]/\[[-1/32<=skoEC1]/\[[-1/85070591730234615865843651857942052864<=skoEAC1]/\[[skoXC1<=2]/\[[skoRC1<=3]/\[[1/2<=skoXC1]/\[0<=skoRC1]]]]]]]]]]]]]].

% In SMTLib2 format:
(declare-fun skoEC1 () Real) (declare-fun skoRC1 () Real) (declare-fun skoXC1 () Real) (declare-fun skoEAC1 () Real) (assert (and (<= 0. skoXC1) (and (> skoXC1 (+ (- 1.) (* skoRC1 (/ 16. 7.)))) (and (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (and (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (and (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (and (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (and (<= skoEC1 (/ 1. 32.)) (and (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (and (<= (/ (- 1.) 32.) skoEC1) (and (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (and (<= skoXC1 2.) (and (<= skoRC1 3.) (and (<= (/ 1. 2.) skoXC1) (<= 0. skoRC1)))))))))))))))

% In GRF format:
(sequent " MetiTarski formula " (antecedent (<= 0. skoXC1) (> skoXC1 (+ (- 1.) (* skoRC1 (/ 16. 7.)))) (<= (* skoXC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (+ (/ (- 3.) 2.) (* skoEC1 (/ (- 1.) 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 2.) (* skoEC1 (+ (* skoEAC1 (/ 3. 2.)) (* skoEC1 (* skoEAC1 (/ 1. 2.)))))) (* skoRC1 (+ (/ (- 1.) 2.) (* skoEC1 (+ 1. (* skoEC1 (/ 1. 2.))))))))) (<= (* skoXC1 (+ (/ 1. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (+ (/ 3. 2.) (* skoEC1 (/ 1. 2.)))))))) (* skoRC1 (+ (+ (* skoEAC1 (- 2.)) (* skoEC1 (+ (* skoEAC1 (/ (- 3.) 2.)) (* skoEC1 (* skoEAC1 (/ (- 1.) 2.)))))) (* skoRC1 (+ (/ 1. 2.) (* skoEC1 (+ (- 1.) (* skoEC1 (/ (- 1.) 2.))))))))) (<= (* skoXC1 (* skoXC1 (/ (- 1.) 4.))) (+ 1. (* skoRC1 (- 1.)))) (<= (* skoXC1 (+ 1. (* skoXC1 (/ (- 1.) 4.)))) skoRC1) (<= skoEC1 (/ 1. 32.)) (<= skoEAC1 (/ 1. 85070591730234615865843651857942052864.)) (<= (/ (- 1.) 32.) skoEC1) (<= (/ (- 1.) 85070591730234615865843651857942052864.) skoEAC1) (<= skoXC1 2.) (<= skoRC1 3.) (<= (/ 1. 2.) skoXC1)) (succedent (> 0. skoRC1)))
-----[end problem]-----

